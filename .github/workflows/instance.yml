# Define the name of the GitHub Action workflow
name: Create an EC2 Instance

# This workflow is manually triggered using the GitHub Actions UI
on:
  workflow_dispatch:
    # Define inputs that are required for the manual trigger
    inputs:
      instanceName:
        description: 'Name of the AWS Instance'
        required: true
      awsRegion:
        description: 'AWS Region for the instance'
        required: true
      instanceType:
        description: 'AWS instance type'
        required: true
      action:
        description: 'Action to perform (apply/destroy)'
        required: true

# Jobs to be executed in this workflow
jobs:
  # Job for applying the EC2 instance
  apply_ec2:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest
    
    # Execute this step only if the action input is "apply"
    if: ${{ github.event.inputs.action == 'apply' }}
    # Define the steps for this job
    steps:
    
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Configure AWS credentials (make sure AWS keys are stored in GitHub secrets)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
    
    # Install Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 'latest'  # You can specify a version like '1.4.0', or use 'latest'

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init
      working-directory: .  # Working directory for Terraform commands
    
    # Format Terraform code
    - name: Terraform Format
      run: terraform fmt
      working-directory: .
      
    # Validate the Terraform code
    - name: Terraform Validate
      run: terraform validate
      working-directory: .
      
    # Apply the Terraform plan
    - name: Terraform Apply
      run: terraform apply -var instanceName=${{ github.event.inputs.instanceName }} -var awsRegion=${{ github.event.inputs.awsRegion }} -var instanceType=${{ github.event.inputs.instanceType }} -input=false --auto-approve=true
      working-directory: .

  # Job for destroying the EC2 instance
  destroy_instance:
    runs-on: ubuntu-latest
    
    # Execute this job only if the action input is "destroy"
    if: ${{ github.event.inputs.action == 'destroy' }}
    
    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Configure AWS credentials (make sure AWS keys are stored in GitHub secrets)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
        
    # Initialize Terraform
    - name: Terraform Init
      run: terraform init
      working-directory: .
      
    # Format Terraform code
    - name: Terraform Format
      run: terraform fmt
      working-directory: .
      
    # Destroy the EC2 instance
    - name: Terraform Destroy
      run: terraform destroy -var instanceName=${{ github.event.inputs.instanceName }} -var awsRegion=${{ github.event.inputs.awsRegion }} -auto-approve
      working-directory: .
